{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants-float64-exponent-bias' );\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' ); // eslint-disable-line id-length\nvar FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/constants-float64-high-word-significand-mask' ); // eslint-disable-line id-length\n\n\n// VARIABLES //\n\n// 4294967295 => 0xffffffff => 11111111111111111111111111111111\nvar ALL_ONES = 4294967295>>>0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ];\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value, and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var parts = modf( 3.14, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*/\nfunction modf( x, out, stride, offset ) {\n\tvar high;\n\tvar low;\n\tvar exp;\n\tvar i;\n\n\t// Special cases...\n\tif ( x < 1.0 ) {\n\t\tif ( x < 0.0 ) {\n\t\t\tmodf( -x, out, stride, offset );\n\t\t\tout[ offset ] *= -1.0;\n\t\t\tout[ offset + stride ] *= -1.0;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === 0.0 ) { // [ +-0, +-0 ]\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offset ] = 0.0;\n\t\tout[ offset + stride ] = x;\n\t\treturn out;\n\t}\n\tif ( isnan( x ) ) {\n\t\tout[ offset ] = NaN;\n\t\tout[ offset + stride ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === PINF ) {\n\t\tout[ offset ] = PINF;\n\t\tout[ offset + stride ] = 0.0;\n\t\treturn out;\n\t}\n\t// Decompose |x|...\n\n\t// Extract the high and low words:\n\ttoWords.assign( x, WORDS, 1, 0 );\n\thigh = WORDS[ 0 ];\n\tlow = WORDS[ 1 ];\n\n\t// Extract the unbiased exponent from the high word:\n\texp = ((high & FLOAT64_HIGH_WORD_EXPONENT_MASK) >> 20)|0; // asm type annotation\n\texp -= FLOAT64_EXPONENT_BIAS|0; // asm type annotation\n\n\t// Handle smaller values (x < 2**20 = 1048576)...\n\tif ( exp < 20 ) {\n\t\ti = (FLOAT64_HIGH_WORD_SIGNIFICAND_MASK >> exp)|0; // asm type annotation\n\n\t\t// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...\n\t\tif ( ((high&i)|low) === 0 ) {\n\t\t\tout[ offset ] = x;\n\t\t\tout[ offset + stride ] = 0.0;\n\t\t\treturn out;\n\t\t}\n\t\t// Turn off all the bits which cannot be exponentiated away:\n\t\thigh &= (~i);\n\n\t\t// Generate the integral part:\n\t\ti = fromWords( high, 0 );\n\n\t\t// The fractional part is whatever is leftover:\n\t\tout[ offset ] = i;\n\t\tout[ offset + stride ] = x - i;\n\t\treturn out;\n\t}\n\t// Check if `x` can even have a fractional part...\n\tif ( exp > 51 ) {\n\t\t// `x` is integral:\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0.0;\n\t\treturn out;\n\t}\n\ti = ALL_ONES >>> (exp-20);\n\n\t// Determine if `x` is integral by checking for less significant significand bits which cannot be exponentiated away...\n\tif ( (low&i) === 0 ) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0.0;\n\t\treturn out;\n\t}\n\t// Turn off all the bits which cannot be exponentiated away:\n\tlow &= (~i);\n\n\t// Generate the integral part:\n\ti = fromWords( high, low );\n\n\t// The fractional part is whatever is leftover:\n\tout[ offset ] = i;\n\tout[ offset + stride ] = x - i;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = modf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fcn = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var parts = modf( 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n*/\nfunction modf( x ) {\n\treturn fcn( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = modf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Decompose a double-precision floating-point number into integral and fractional parts.\n*\n* @module @stdlib/math-base-special-modf\n*\n* @example\n* var modf = require( '@stdlib/math-base-special-modf' );\n*\n* var parts = modf( 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var modf = require( '@stdlib/math-base-special-modf' );\n*\n* var out = new Float64Array( 2 );\n*\n* var parts = modf.assign( 3.14, out, 1, 0 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* var bool = ( parts === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAU,QAAS,sCAAuC,EAC1DC,EAAY,QAAS,wCAAyC,EAC9DC,EAAO,QAAS,gCAAiC,EACjDC,EAAwB,QAAS,yCAA0C,EAC3EC,EAAkC,QAAS,mDAAoD,EAC/FC,EAAqC,QAAS,sDAAuD,EAMrGC,EAAW,WAGXC,EAAQ,CAAE,EAAK,CAAI,EAmBvB,SAASC,EAAMC,EAAGC,EAAKC,EAAQC,EAAS,CACvC,IAAIC,EACAC,EACAC,EACA,EAGJ,OAAKN,EAAI,EACHA,EAAI,GACRD,EAAM,CAACC,EAAGC,EAAKC,EAAQC,CAAO,EAC9BF,EAAKE,CAAO,GAAK,GACjBF,EAAKE,EAASD,CAAO,GAAK,GACnBD,GAEHD,IAAM,GACVC,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAIF,EAClBC,IAERA,EAAKE,CAAO,EAAI,EAChBF,EAAKE,EAASD,CAAO,EAAIF,EAClBC,GAEHX,EAAOU,CAAE,GACbC,EAAKE,CAAO,EAAI,IAChBF,EAAKE,EAASD,CAAO,EAAI,IAClBD,GAEHD,IAAMP,GACVQ,EAAKE,CAAO,EAAIV,EAChBQ,EAAKE,EAASD,CAAO,EAAI,EAClBD,IAKRV,EAAQ,OAAQS,EAAGF,EAAO,EAAG,CAAE,EAC/BM,EAAON,EAAO,CAAE,EAChBO,EAAMP,EAAO,CAAE,EAGfQ,GAAQF,EAAOT,IAAoC,GAAI,EACvDW,GAAOZ,EAAsB,EAGxBY,EAAM,IACV,EAAKV,GAAsCU,EAAK,GAGzCF,EAAK,EAAGC,KAAS,GACvBJ,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAI,EAClBD,IAGRG,GAAS,CAAC,EAGV,EAAIZ,EAAWY,EAAM,CAAE,EAGvBH,EAAKE,CAAO,EAAI,EAChBF,EAAKE,EAASD,CAAO,EAAIF,EAAI,EACtBC,IAGHK,EAAM,KAMX,EAAIT,IAAcS,EAAI,IAGhBD,EAAI,KAAO,IAChBJ,EAAKE,CAAO,EAAIH,EAChBC,EAAKE,EAASD,CAAO,EAAI,EAClBD,IAGRI,GAAQ,CAAC,EAGT,EAAIb,EAAWY,EAAMC,CAAI,EAGzBJ,EAAKE,CAAO,EAAI,EAChBF,EAAKE,EAASD,CAAO,EAAIF,EAAI,EACtBC,GACR,CAKAZ,EAAO,QAAUU,ICvJjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAM,IAgBV,SAASC,EAAMC,EAAI,CAClB,OAAOF,EAAKE,EAAG,CAAE,EAAK,CAAI,EAAG,EAAG,CAAE,CACnC,CAKAH,EAAO,QAAUE,ICCjB,IAAIE,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "isnan", "toWords", "fromWords", "PINF", "FLOAT64_EXPONENT_BIAS", "FLOAT64_HIGH_WORD_EXPONENT_MASK", "FLOAT64_HIGH_WORD_SIGNIFICAND_MASK", "ALL_ONES", "WORDS", "modf", "x", "out", "stride", "offset", "high", "low", "exp", "require_main", "__commonJSMin", "exports", "module", "fcn", "modf", "x", "setReadOnly", "main", "assign"]
}
