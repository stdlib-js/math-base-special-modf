{"version":3,"file":"index.mjs","sources":["../lib/modf.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport toWords from '@stdlib/number-float64-base-to-words' ;\nimport fromWords from '@stdlib/number-float64-base-from-words' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport FLOAT64_EXPONENT_BIAS from '@stdlib/constants-float64-exponent-bias' ;\nimport FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants-float64-high-word-exponent-mask' ; // eslint-disable-line id-length\nimport FLOAT64_HIGH_WORD_SIGNIFICAND_MASK from '@stdlib/constants-float64-high-word-significand-mask' ; // eslint-disable-line id-length\n\n\n// VARIABLES //\n\n// 4294967295 => 0xffffffff => 11111111111111111111111111111111\nvar ALL_ONES = 4294967295>>>0; // asm type annotation\n\n// High/low words workspace:\nvar WORDS = [ 0|0, 0|0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var parts = modf( [ 0.0, 0.0 ], 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*/\nfunction modf( out, x ) {\n\tvar high;\n\tvar low;\n\tvar exp;\n\tvar i;\n\n\t// Special cases...\n\tif ( x < 1.0 ) {\n\t\tif ( x < 0.0 ) {\n\t\t\tmodf( out, -x );\n\t\t\tout[ 0 ] *= -1.0;\n\t\t\tout[ 1 ] *= -1.0;\n\t\t\treturn out;\n\t\t}\n\t\tif ( x === 0.0 ) { // [ +-0, +-0 ]\n\t\t\tout[ 0 ] = x;\n\t\t\tout[ 1 ] = x;\n\t\t\treturn out;\n\t\t}\n\t\tout[ 0 ] = 0.0;\n\t\tout[ 1 ] = x;\n\t\treturn out;\n\t}\n\tif ( isnan( x ) ) {\n\t\tout[ 0 ] = NaN;\n\t\tout[ 1 ] = NaN;\n\t\treturn out;\n\t}\n\tif ( x === PINF ) {\n\t\tout[ 0 ] = PINF;\n\t\tout[ 1 ] = 0.0;\n\t\treturn out;\n\t}\n\t// Decompose |x|...\n\n\t// Extract the high and low words:\n\ttoWords( WORDS, x );\n\thigh = WORDS[ 0 ];\n\tlow = WORDS[ 1 ];\n\n\t// Extract the unbiased exponent from the high word:\n\texp = ((high & FLOAT64_HIGH_WORD_EXPONENT_MASK) >> 20)|0; // asm type annotation\n\texp -= FLOAT64_EXPONENT_BIAS|0; // asm type annotation\n\n\t// Handle smaller values (x < 2**20 = 1048576)...\n\tif ( exp < 20 ) {\n\t\ti = (FLOAT64_HIGH_WORD_SIGNIFICAND_MASK >> exp)|0; // asm type annotation\n\n\t\t// Determine if `x` is integral by checking for significand bits which cannot be exponentiated away...\n\t\tif ( ((high&i)|low) === 0 ) {\n\t\t\tout[ 0 ] = x;\n\t\t\tout[ 1 ] = 0.0;\n\t\t\treturn out;\n\t\t}\n\t\t// Turn off all the bits which cannot be exponentiated away:\n\t\thigh &= (~i);\n\n\t\t// Generate the integral part:\n\t\ti = fromWords( high, 0 );\n\n\t\t// The fractional part is whatever is leftover:\n\t\tout[ 0 ] = i;\n\t\tout[ 1 ] = x - i;\n\t\treturn out;\n\t}\n\t// Check if `x` can even have a fractional part...\n\tif ( exp > 51 ) {\n\t\t// `x` is integral:\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0.0;\n\t\treturn out;\n\t}\n\ti = ALL_ONES >>> (exp-20);\n\n\t// Determine if `x` is integral by checking for less significant significand bits which cannot be exponentiated away...\n\tif ( (low&i) === 0 ) {\n\t\tout[ 0 ] = x;\n\t\tout[ 1 ] = 0.0;\n\t\treturn out;\n\t}\n\t// Turn off all the bits which cannot be exponentiated away:\n\tlow &= (~i);\n\n\t// Generate the integral part:\n\ti = fromWords( high, low );\n\n\t// The fractional part is whatever is leftover:\n\tout[ 0 ] = i;\n\tout[ 1 ] = x - i;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default modf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './modf.js' ;\n\n\n// MAIN //\n\n/**\n* Decomposes a double-precision floating-point number into integral and fractional parts, each having the same type and sign as the input value.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} x - input value\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var parts = modf( 3.14 );\n* // returns [ 3.0, 0.14000000000000012 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64' ;\n*\n* var out = new Float64Array( 2 );\n*\n* var parts = modf( out, 3.14 );\n* // returns <Float64Array>[ 3.0, 0.14000000000000012 ]\n*\n* var bool = ( parts === out );\n* // returns true\n*/\nfunction modf( out, x ) {\n\tif ( arguments.length === 1 ) {\n\t\treturn fcn( [ 0.0, 0.0 ], out );\n\t}\n\treturn fcn( out, x );\n}\n\n\n// EXPORTS //\n\nexport default modf;\n"],"names":["WORDS","modf","out","x","high","low","exp","i","isnan","NaN","PINF","toWords","FLOAT64_HIGH_WORD_EXPONENT_MASK","FLOAT64_EXPONENT_BIAS","FLOAT64_HIGH_WORD_SIGNIFICAND_MASK","fromWords","arguments","length","fcn"],"mappings":";;urBAkCA,IAGIA,EAAQ,CAAE,EAAK,GAiBnB,SAASC,EAAMC,EAAKC,GACnB,IAAIC,EACAC,EACAC,EACAC,EAGJ,OAAKJ,EAAI,EACHA,EAAI,GACRF,EAAMC,GAAMC,GACZD,EAAK,KAAQ,EACbA,EAAK,KAAQ,EACNA,GAEG,IAANC,GACJD,EAAK,GAAMC,EACXD,EAAK,GAAMC,EACJD,IAERA,EAAK,GAAM,EACXA,EAAK,GAAMC,EACJD,GAEHM,EAAOL,IACXD,EAAK,GAAMO,IACXP,EAAK,GAAMO,IACJP,GAEHC,IAAMO,GACVR,EAAK,GAAMQ,EACXR,EAAK,GAAM,EACJA,IAKRS,EAASX,EAAOG,GAEhBE,EAAML,EAAO,GAGbM,IAJAF,EAAOJ,EAAO,IAICY,IAAoC,GAAI,GACvDN,GAA6B,EAAtBO,GAGI,GAIc,IAAjBT,GAHPG,EAAKO,GAAsCR,EAAK,GAGjCD,IACdH,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,IAMRK,EAAIQ,EAHJX,IAAUG,EAGW,GAGrBL,EAAK,GAAMK,EACXL,EAAK,GAAMC,EAAII,EACRL,GAGHI,EAAM,IASM,IAAXD,GAHNE,EA5Fc,aA4FID,EAAI,MAJrBJ,EAAK,GAAMC,EACXD,EAAK,GAAM,EACJA,IAcRK,EAAIQ,EAAWX,EAHfC,IAASE,GAMTL,EAAK,GAAMK,EACXL,EAAK,GAAMC,EAAII,EACRL,IC9FR,SAASD,EAAMC,EAAKC,GACnB,OAA0B,IAArBa,UAAUC,OACPC,EAAK,CAAE,EAAK,GAAOhB,GAEpBgB,EAAKhB,EAAKC"}